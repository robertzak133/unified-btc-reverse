## A set of hand created binary patches for the BTC-7A.
## To be consumed by codePatcher() functions
    

##
# Patches required to convert BTC-7A to "white flash"
#    Disable "black and white mode"
#    Disable the IR_CUT (filter motor)
##

# Firmware Version Patch
# Overrides the factory firmware string with one that encodes customization

firmware_wf_e_cr_nv_patch_list = {}
firmware_wf_e_cr_nv_patch_list['firmware_ID0'] = {}
firmware_wf_e_cr_nv_patch_list['firmware_ID0']['start_offset'] = 0x2bdb68;
firmware_wf_e_cr_nv_patch_list['firmware_ID0']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_wf_e_cr_nv_patch_list['firmware_ID0']['change_to_bytes']   = bytes("WWL8EH5_wfecrnv", 'utf-8');

firmware_wf_e_cr_nv_patch_list['firmware_ID1'] = {}
firmware_wf_e_cr_nv_patch_list['firmware_ID1']['start_offset'] = 0x2d86dc;
firmware_wf_e_cr_nv_patch_list['firmware_ID1']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_wf_e_cr_nv_patch_list['firmware_ID1']['change_to_bytes']   = bytes("WWL8EH5_wfecrnv", 'utf-8');

##
firmware_wf_e_cr_nv_20s_patch_list = {}
firmware_wf_e_cr_nv_20s_patch_list['firmware_ID0'] = {}
firmware_wf_e_cr_nv_20s_patch_list['firmware_ID0']['start_offset'] = 0x2bdb68;
firmware_wf_e_cr_nv_20s_patch_list['firmware_ID0']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_wf_e_cr_nv_20s_patch_list['firmware_ID0']['change_to_bytes']   = bytes("WWLH5_wfecrnv20", 'utf-8');

firmware_wf_e_cr_nv_20s_patch_list = {}
firmware_wf_e_cr_nv_20s_patch_list['firmware_ID1'] = {}
firmware_wf_e_cr_nv_20s_patch_list['firmware_ID1']['start_offset'] = 0x2d86dc;
firmware_wf_e_cr_nv_20s_patch_list['firmware_ID1']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_wf_e_cr_nv_20s_patch_list['firmware_ID1']['change_to_bytes']   = bytes("WWLH5_wfecrnv20", 'utf-8');

##
firmware_wf_d_cr_nv_20s_patch_list = {}
firmware_wf_d_cr_nv_20s_patch_list['firmware_ID0'] = {}
firmware_wf_d_cr_nv_20s_patch_list['firmware_ID0']['start_offset'] = 0x2bdb68;
firmware_wf_d_cr_nv_20s_patch_list['firmware_ID0']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_wf_d_cr_nv_20s_patch_list['firmware_ID0']['change_to_bytes']   = bytes("WWLH5_wfdcrnv20", 'utf-8');

firmware_wf_d_cr_nv_20s_patch_list['firmware_ID1'] = {}
firmware_wf_d_cr_nv_20s_patch_list['firmware_ID1']['start_offset'] = 0x2d86dc;
firmware_wf_d_cr_nv_20s_patch_list['firmware_ID1']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_wf_d_cr_nv_20s_patch_list['firmware_ID1']['change_to_bytes']   = bytes("WWLH5_wfdcrnv20", 'utf-8');

##
firmware_cr_nv_patch_list = {}
firmware_cr_nv_patch_list['firmware_ID0'] = {}
firmware_cr_nv_patch_list['firmware_ID0']['start_offset'] = 0x2bdb68;
firmware_cr_nv_patch_list['firmware_ID0']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_cr_nv_patch_list['firmware_ID0']['change_to_bytes']   = bytes("WWL8EH5_crnv   ", 'utf-8');

firmware_cr_nv_patch_list['firmware_ID0'] = {}
firmware_cr_nv_patch_list['firmware_ID0']['start_offset'] = 0x2d86dc;
firmware_cr_nv_patch_list['firmware_ID0']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_cr_nv_patch_list['firmware_ID0']['change_to_bytes']   = bytes("WWL8EH5_crnv   ", 'utf-8');

##
firmware_cr_nv_dslr_patch_list = {}
firmware_cr_nv_dslr_patch_list['firmware_ID0'] = {}
firmware_cr_nv_dslr_patch_list['firmware_ID0']['start_offset'] = 0x2bdb68;
firmware_cr_nv_dslr_patch_list['firmware_ID0']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_cr_nv_dslr_patch_list['firmware_ID0']['change_to_bytes']   = bytes("WWL8H5_crnvdslr", 'utf-8');

firmware_cr_nv_dslr_patch_list['firmware_ID1'] = {}
firmware_cr_nv_dslr_patch_list['firmware_ID1']['start_offset'] = 0x2d86dc;
firmware_cr_nv_dslr_patch_list['firmware_ID1']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_cr_nv_dslr_patch_list['firmware_ID1']['change_to_bytes']   = bytes("WWL8H5_crnvdslr", 'utf-8');

##
firmware_wf_e_cr_nv_dslr_patch_list = {}
firmware_wf_e_cr_nv_dslr_patch_list['firmware_ID0'] = {}
firmware_wf_e_cr_nv_dslr_patch_list['firmware_ID0']['start_offset'] = 0x2bdb68;
firmware_wf_e_cr_nv_dslr_patch_list['firmware_ID0']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_wf_e_cr_nv_dslr_patch_list['firmware_ID0']['change_to_bytes']   = bytes("WH5_wfecrnvdslr", 'utf-8');

firmware_wf_e_cr_nv_dslr_patch_list['firmware_ID1'] = {}
firmware_wf_e_cr_nv_dslr_patch_list['firmware_ID1']['start_offset'] = 0x2d86dc;
firmware_wf_e_cr_nv_dslr_patch_list['firmware_ID1']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_wf_e_cr_nv_dslr_patch_list['firmware_ID1']['change_to_bytes']   = bytes("WH5_wfecrnvdslr", 'utf-8');

##
firmware_bm_wf_e_cr_nv_patch_list = {}
firmware_bm_wf_e_cr_nv_patch_list['firmware_ID0'] = {}
firmware_bm_wf_e_cr_nv_patch_list['firmware_ID0']['start_offset'] = 0x2bdb68;
firmware_bm_wf_e_cr_nv_patch_list['firmware_ID0']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_bm_wf_e_cr_nv_patch_list['firmware_ID0']['change_to_bytes']   = bytes("WWLH5_bmwfecrnv", 'utf-8');

firmware_bm_wf_e_cr_nv_patch_list['firmware_ID1'] = {}
firmware_bm_wf_e_cr_nv_patch_list['firmware_ID1']['start_offset'] = 0x2d86dc;
firmware_bm_wf_e_cr_nv_patch_list['firmware_ID1']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_bm_wf_e_cr_nv_patch_list['firmware_ID1']['change_to_bytes']   = bytes("WWLH5_bmwfecrnv", 'utf-8');

##
firmware_bm_wf_e_cr_nv_dslr_patch_list = {}
firmware_bm_wf_e_cr_nv_dslr_patch_list['firmware_ID0'] = {}
firmware_bm_wf_e_cr_nv_dslr_patch_list['firmware_ID0']['start_offset'] = 0x2bdb68;
firmware_bm_wf_e_cr_nv_dslr_patch_list['firmware_ID0']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_bm_wf_e_cr_nv_dslr_patch_list['firmware_ID0']['change_to_bytes']   = bytes("H5bmwfecrnvdslr", 'utf-8');

firmware_bm_wf_e_cr_nv_dslr_patch_list = {}
firmware_bm_wf_e_cr_nv_dslr_patch_list['firmware_ID0'] = {}
firmware_bm_wf_e_cr_nv_dslr_patch_list['firmware_ID0']['start_offset'] = 0x2d86dc;
firmware_bm_wf_e_cr_nv_dslr_patch_list['firmware_ID0']['change_from_bytes'] = bytes("BTC8EH5_L10200F", 'utf-8');
firmware_bm_wf_e_cr_nv_dslr_patch_list['firmware_ID0']['change_to_bytes']   = bytes("H5bmwfecrnvdslr", 'utf-8');

# Disable the digital_effect_BW mode by substituting pointer to color mode
#   into switch table.

digital_effect_patch_list = {}
digital_effect_patch_list['Digital_Mode_Disable_BW'] = {}
digital_effect_patch_list['Digital_Mode_Disable_BW']['start_offset'] = 0x375e1c
digital_effect_patch_list['Digital_Mode_Disable_BW']['change_from_bytes'] = bytes([0xa8, 0xef, 0x11, 0x80])
digital_effect_patch_list['Digital_Mode_Disable_BW']['change_to_bytes']   = bytes([0x20, 0xed, 0x11, 0x80])

# rewrite argument to IR_CUT routine
ir_cut_disable_config_patch_list = {}
ir_cut_disable_config_patch_list['IR_CUT_Disable_Config'] = {}
ir_cut_disable_config_patch_list['IR_CUT_Disable_Config']['start_offset'] = 0x00e8fec
ir_cut_disable_config_patch_list['IR_CUT_Disable_Config']['change_from_bytes'] = bytes([0x21, 0x20, 0x00, 0x00])
ir_cut_disable_config_patch_list['IR_CUT_Disable_Config']['change_to_bytes']   = bytes([0x01, 0x00, 0x04, 0x24])

# rewrite argument to IR_CUT routine
ir_cut_disable_on_wake_patch_list = {}
ir_cut_disable_on_wake_patch_list['IR_CUT_Disable_On_Wake'] = {}
ir_cut_disable_on_wake_patch_list['IR_CUT_Disable_On_Wake']['start_offset'] = 0x000e8f8c
ir_cut_disable_on_wake_patch_list['IR_CUT_Disable_On_Wake']['change_from_bytes'] = bytes([0x21, 0x20, 0x00, 0x00])
ir_cut_disable_on_wake_patch_list['IR_CUT_Disable_On_Wake']['change_to_bytes']   = bytes([0x01, 0x00, 0x04, 0x24])

# Redirect call to setSensorDigitalEffectDayNight
#   so that it goes to cp_setSensorDigitalEffectDayNight
white_flash_awb_patch_list = {}
white_flash_awb_patch_list['setSensorDigitalEffectPhoto'] = {}
white_flash_awb_patch_list['setSensorDigitalEffectPhoto']['start_offset'] = 0x00e820c
white_flash_awb_patch_list['setSensorDigitalEffectPhoto']['change_from_bytes'] = bytes([0xd0, 0xff, 0xbd, 0x27])
white_flash_awb_patch_list['setSensorDigitalEffectPhoto']['change_to_jump'] = 'j.cp_setSensorDigitalEffectPhoto'

#   so that it goes to cp_setSensorDigitalEffectDayNight
white_flash_awb_patch_list['setSensorDigitalEffectDayVideo'] = {}
white_flash_awb_patch_list['setSensorDigitalEffectDayVideo']['start_offset'] = 0x00e85d4
white_flash_awb_patch_list['setSensorDigitalEffectDayVideo']['change_from_bytes'] = bytes([0xd0, 0xff, 0xbd, 0x27])
white_flash_awb_patch_list['setSensorDigitalEffectDayVideo']['change_to_jump'] = 'j.cp_setSensorDigitalEffectVideo'

# eliminate the limit check on night time video length by
#   nulling out the store that sets video length to 20 seconds if IR LED on
#   this allows the ribbon display to properly record remaining video lenght
#   special case in HceTaskRecording_RecVideoIniit()
#   replace the code that would otherwise limit the video to 20 seconds with a NOOP
night_video_limit_patch_list = {}
night_video_limit_patch_list['No_Video_Limit_Store'] = {}
night_video_limit_patch_list['No_Video_Limit_Store']['start_offset'] = 0x001001a4
night_video_limit_patch_list['No_Video_Limit_Store']['change_from_bytes'] = bytes([0x14,0x00,0x02,0x24])
night_video_limit_patch_list['No_Video_Limit_Store']['change_to_bytes']   = bytes([0x00,0x00,0x00,0x00])

# this sets the maximum length for a video under IR LED illumination to 300 seconds (5 minutes)
# in HceTaskRecordingRecStop
# 2022-09-02 Zak -- I can't find this in the HP5 image
#night_video_limit_patch_list['End_Video_Limit_Check'] = {}
#night_video_limit_patch_list['End_Video_Limit_Check']['start_offset'] = 0x001fbac
#night_video_limit_patch_list['End_Video_Limit_Check']['change_from_bytes'] = bytes([0x14,0x00,0x44,0x2c])
#night_video_limit_patch_list['End_Video_Limit_Check']['change_to_bytes']   = bytes([0x2c,0x01,0x44,0x2c])

#
hand_patched_white_flash_patch_list = {}
hand_patched_white_flash_patch_list.update(digital_effect_patch_list)
hand_patched_white_flash_patch_list.update(ir_cut_disable_config_patch_list)
hand_patched_white_flash_patch_list.update(ir_cut_disable_on_wake_patch_list)


#
# Rewrite the call that sprintf()'s the string to the bottom of the ribbon
#    in screenPrintReplayHeaderRibbons() at 0x800269d8
#    so that at 0x80026b08
#    so that it calls a custom sprintf function we just created at 0x80066ab8
#    instead of to "local_sprintf" at 0x80362354
custom_ribbon_patch_list = {}
custom_ribbon_patch_list['Custom_Ribbon'] = {}
custom_ribbon_patch_list['Custom_Ribbon']['start_offset'] = 0x00112194
custom_ribbon_patch_list['Custom_Ribbon']['change_from_jump'] = 'jal.local_sprintf'
custom_ribbon_patch_list['Custom_Ribbon']['change_to_jump'] = 'jal.wbwl_custom_ribbon_sprintf'
# this in HandleReplayMenuVideo
custom_ribbon_patch_list['ld_draw_video_scroll_bar_hook'] = {}
custom_ribbon_patch_list['ld_draw_video_scroll_bar_hook']['start_offset'] = 0x00112af0
custom_ribbon_patch_list['ld_draw_video_scroll_bar_hook']['change_from_jump'] = 'j.draw_video_scroll_bar'
custom_ribbon_patch_list['ld_draw_video_scroll_bar_hook']['change_to_jump'] = 'j.ld_draw_video_scroll_bar'
#
custom_ribbon_patch_list['ld_draw_video_scroll_bar_hook2'] = {}
custom_ribbon_patch_list['ld_draw_video_scroll_bar_hook2']['start_offset'] = 0x00112a40
custom_ribbon_patch_list['ld_draw_video_scroll_bar_hook2']['change_from_jump'] = 'jal.draw_video_scroll_bar'
custom_ribbon_patch_list['ld_draw_video_scroll_bar_hook2']['change_to_jump'] = 'jal.ld_draw_video_scroll_bar'
#
custom_ribbon_patch_list['ld_clear_video_scroll_bar_hook'] = {}
custom_ribbon_patch_list['ld_clear_video_scroll_bar_hook']['start_offset'] = 0x00112844
custom_ribbon_patch_list['ld_clear_video_scroll_bar_hook']['change_from_jump'] = 'jal.draw_rectangle_wrapper'
custom_ribbon_patch_list['ld_clear_video_scroll_bar_hook']['change_to_jump'] = 'jal.ld_clear_video_scroll_bar'

#
# custom_info_strip patch
#
custom_info_strip_patch_list = {}
custom_info_strip_patch_list['local_sprintf'] = {}
custom_info_strip_patch_list['local_sprintf']['start_offset'] = 0x00fa5a8
custom_info_strip_patch_list['local_sprintf']['change_from_jump'] = 'jal.local_sprintf'
custom_info_strip_patch_list['local_sprintf']['change_to_jump']   = 'jal.wbwl_custom_info_strip_sprintf'

# Hooks for stateful Battery Monitor functions
battery_monitor_patch_list = {}
# in HceCommon_InitOptions
battery_monitor_patch_list['HceCommon_InitOptions'] = {}
battery_monitor_patch_list['HceCommon_InitOptions']['start_offset'] = 0x005cd08
battery_monitor_patch_list['HceCommon_InitOptions']['change_from_jump'] = 'jal.HceCommon_RestoreDefaultColdItem'
battery_monitor_patch_list['HceCommon_InitOptions']['change_to_jump'] = 'jal.bm_HceCommon_RestoreDefaultColdItem_hook'
# in handleRestoreDefaultMenu
battery_monitor_patch_list['handleRestoreDefaultMenu'] = {}
battery_monitor_patch_list['handleRestoreDefaultMenu']['start_offset'] = 0x0010eb90
battery_monitor_patch_list['handleRestoreDefaultMenu']['change_from_jump'] = 'jal.HceCommon_RestoreDefaultColdItem'
battery_monitor_patch_list['handleRestoreDefaultMenu']['change_to_jump'] = 'jal.bm_HceCommon_RestoreDefaultColdItem_hook'
# in TaskUpgrade_FSM_task6
battery_monitor_patch_list['reboot_for_changed_power_switch'] = {}
battery_monitor_patch_list['reboot_for_changed_power_switch']['start_offset'] = 0x0010582c
battery_monitor_patch_list['reboot_for_changed_power_switch']['change_from_jump'] = 'jal.HceCommon_RestoreDefaultColdItem'
battery_monitor_patch_list['reboot_for_changed_power_switch']['change_to_jump'] = 'jal.bm_HceCommon_RestoreDefaultColdItem_hook'
# in handleSetTimeMenu
battery_monitor_patch_list['bm_user_set_clock_hook'] = {}
battery_monitor_patch_list['bm_user_set_clock_hook']['start_offset'] = 0x00111ca0
battery_monitor_patch_list['bm_user_set_clock_hook']['change_from_jump'] = 'jal.hal_set_rtc'
battery_monitor_patch_list['bm_user_set_clock_hook']['change_to_jump'] = 'jal.bm_hal_set_rtc_hook'
#  in HceTaskStill_WaitView
battery_monitor_patch_list['bm_HceCommon_SetCaptureImage_hook'] = {}
battery_monitor_patch_list['bm_HceCommon_SetCaptureImage_hook']['start_offset'] = 0x0010167c
battery_monitor_patch_list['bm_HceCommon_SetCaptureImage_hook']['change_from_jump'] = 'jal.HceCommon_SetCaptureImag'
battery_monitor_patch_list['bm_HceCommon_SetCaptureImage_hook']['change_to_jump'] = 'jal.bm_HceCommon_SetCaptureImage_hook'
# in rapidFirePhotos
battery_monitor_patch_list['bm_RapidFirePhotos_printf_hook'] = {}
battery_monitor_patch_list['bm_RapidFirePhotos_printf_hook']['start_offset'] = 0x000e7da8
battery_monitor_patch_list['bm_RapidFirePhotos_printf_hook']['change_from_jump'] = 'jal.tty_printf'
battery_monitor_patch_list['bm_RapidFirePhotos_printf_hook']['change_to_jump'] = 'jal.bm_RapidFirePhotos_printf_hook'
# in HceTaskRecording_RecVideoToRec1
battery_monitor_patch_list['bm_video_log_printf_hook'] = {}
battery_monitor_patch_list['bm_video_log_printf_hook']['start_offset'] = 0x000fe968
battery_monitor_patch_list['bm_video_log_printf_hook']['change_from_jump'] = 'jal.log_printf'
battery_monitor_patch_list['bm_video_log_printf_hook']['change_to_jump'] = 'jal.bm_video_log_printf_hook'
# in get_battery_percent
battery_monitor_patch_list['bm_get_current_battery_level1'] = {}
battery_monitor_patch_list['bm_get_current_battery_level1']['start_offset'] = 0x000eb388
battery_monitor_patch_list['bm_get_current_battery_level1']['change_from_jump'] = 'jal.get_battery_percent_from_voltage'
battery_monitor_patch_list['bm_get_current_battery_level1']['change_to_jump'] = 'jal.bm_get_current_battery_level'
# in displayBatteryPercent
battery_monitor_patch_list['bm_get_current_battery_level2'] = {}
battery_monitor_patch_list['bm_get_current_battery_level2']['start_offset'] = 0x000eb9c0
battery_monitor_patch_list['bm_get_current_battery_level2']['change_from_jump'] = 'jal.get_battery_percent_from_voltage'
battery_monitor_patch_list['bm_get_current_battery_level2']['change_to_jump'] = 'jal.bm_get_current_battery_level'
# in HcePower_CommonPowerOff
battery_monitor_patch_list['store_pressure_bm_hook'] = {}
battery_monitor_patch_list['store_pressure_bm_hook']['start_offset'] = 0x000eb428
battery_monitor_patch_list['store_pressure_bm_hook']['change_from_jump'] = 'jal.store_pressure_trend'
battery_monitor_patch_list['store_pressure_bm_hook']['change_to_jump'] = 'jal.store_pressure_bm_hook'
# in HcePower_CommonPowerOn
battery_monitor_patch_list['bm_Volt_Calib_Bat_hook'] = {}
battery_monitor_patch_list['bm_Volt_Calib_Bat_hook']['start_offset'] = 0x0010aef0
battery_monitor_patch_list['bm_Volt_Calib_Bat_hook']['change_from_jump'] = 'jal.Volt_Calib_Bat'
battery_monitor_patch_list['bm_Volt_Calib_Bat_hook']['change_to_jump'] = 'jal.bm_Volt_Calib_Bat_hook'
# in handleBatteryTypeMenu
battery_monitor_patch_list['bm_handleBatteryTypeMenu_hook'] = {}
battery_monitor_patch_list['bm_handleBatteryTypeMenu_hook']['start_offset'] = 0x0010ede0
battery_monitor_patch_list['bm_handleBatteryTypeMenu_hook']['change_from_bytes']  = bytes([0xd8,0xff,0xbd,0x27])
battery_monitor_patch_list['bm_handleBatteryTypeMenu_hook']['change_to_jump'] = 'j.bm_handleBatteryTypeMenu'
# in HceTaskStill_End
battery_monitor_patch_list['bm_burst_mode_off_hook'] = {}
battery_monitor_patch_list['bm_burst_mode_off_hook']['start_offset'] = 0x00100730
battery_monitor_patch_list['bm_burst_mode_off_hook']['change_from_jump']  = 'jal.IRLedOff'
battery_monitor_patch_list['bm_burst_mode_off_hook']['change_to_jump'] = 'jal.bm_off_photo_burst_hook'
# in TaskRecording_FSM_task9
battery_monitor_patch_list['bm_video_off_hook'] = {}
battery_monitor_patch_list['bm_video_off_hook']['start_offset'] = 0x00fe73c
battery_monitor_patch_list['bm_video_off_hook']['change_from_jump']  = 'jal.IRLedOff'
battery_monitor_patch_list['bm_video_off_hook']['change_to_jump'] = 'jal.bm_video_off_hook'


# Hooks for External Trigger
external_trigger_patch_list = {}
# in HceCommon_InitOptions
external_trigger_patch_list['HceCommon_InitOptions'] = {}
external_trigger_patch_list['HceCommon_InitOptions']['start_offset'] = 0x0005cd08
external_trigger_patch_list['HceCommon_InitOptions']['change_from_jump'] = 'jal.HceCommon_RestoreDefaultColdItem'
external_trigger_patch_list['HceCommon_InitOptions']['change_to_jump'] = 'jal.bm_HceCommon_RestoreDefaultColdItem_hook'


# Patch to enable dslr trigger (w/o battery monitor)
# in rapidFirePhotos
dslr_trigger_patch_list = {}
dslr_trigger_patch_list['dt_RapidFirePhotos_printf_hook'] = {}
dslr_trigger_patch_list['dt_RapidFirePhotos_printf_hook']['start_offset'] = 0x000e7da8
dslr_trigger_patch_list['dt_RapidFirePhotos_printf_hook']['change_from_jump'] = 'jal.tty_printf'
dslr_trigger_patch_list['dt_RapidFirePhotos_printf_hook']['change_to_jump'] = 'jal.dt_RapidFirePhotos_printf_hook'
# HceTaskRecording_RecVideoToRec1
dslr_trigger_patch_list['dt_video_log_printf_hook'] = {}
dslr_trigger_patch_list['dt_video_log_printf_hook']['start_offset'] = 0x000fe968
dslr_trigger_patch_list['dt_video_log_printf_hook']['change_from_jump'] = 'jal.log_printf'
dslr_trigger_patch_list['dt_video_log_printf_hook']['change_to_jump'] = 'jal.dt_video_log_printf_hook'
# in HceTaskStill
dslr_trigger_patch_list['dt_burst_mode_off_hook'] = {}
dslr_trigger_patch_list['dt_burst_mode_off_hook']['start_offset'] = 0x00100730
dslr_trigger_patch_list['dt_burst_mode_off_hook']['change_from_jump']  = 'jal.IRLedOff'
dslr_trigger_patch_list['dt_burst_mode_off_hook']['change_to_jump'] = 'jal.dt_off_photo_burst_hook'
# in TaskRecording_FSM_task9
dslr_trigger_patch_list['dt_video_off_hook'] = {}
dslr_trigger_patch_list['dt_video_off_hook']['start_offset'] = 0x000fe73c
dslr_trigger_patch_list['dt_video_off_hook']['change_from_jump']  = 'jal.IRLedOff'
dslr_trigger_patch_list['dt_video_off_hook']['change_to_jump'] = 'jal.dt_video_off_hook'



# Patch to Set the Countdown timer from 30 (0x1e) seconds to 20 (0x14) seconds
# in taskWaitPIR_task0()
countdown_timer_patch_list = {}
countdown_timer_patch_list['set_counter_value'] = {}
countdown_timer_patch_list['set_counter_value']['start_offset'] = 0x00113120
countdown_timer_patch_list['set_counter_value']['change_from_bytes'] = bytes([0x1e,0x00,0x02,0x24])
countdown_timer_patch_list['set_counter_value']['change_to_bytes']   = bytes([0x14,0x00,0x02,0x24])


## Hooks to enable debug printf statements to work during firmware load
verbose_debug_patch_list = {}
# Preamble
verbose_debug_patch_list['VD_tty_preamble'] = {}
verbose_debug_patch_list['VD_tty_preamble']['start_offset'] = 0x0147084
verbose_debug_patch_list['VD_tty_preamble']['change_from_jump']  = 'jalr.s0'
verbose_debug_patch_list['VD_tty_preamble']['change_to_jump'] = 'jal.set_pre_printf_state'
# Flush
verbose_debug_patch_list['VD_tty_flush'] = {}
verbose_debug_patch_list['VD_tty_flush']['start_offset'] = 0x01470a4
verbose_debug_patch_list['VD_tty_flush']['change_from_jump']  = 'jalr.s0'
verbose_debug_patch_list['VD_tty_flush']['change_to_jump'] = 'jal.check_post_printf_state_set_sio_params'

# Hooks for Custom Trail Camera Environment Initalization
ctc_init_patch_list = {}
ctc_init_patch_list['CTC_init_hook'] = {}
# Redirect the HceCommon_InitOptions
# in appInit()
ctc_init_patch_list['CTC_init_hook']['start_offset'] = 0x000669b4
ctc_init_patch_list['CTC_init_hook']['change_from_jump']  = 'jal.HceCommon_InitOptions'
ctc_init_patch_list['CTC_init_hook']['change_to_jump'] = 'jal.ctc_init_hook'

# Redirect the call to setup the CodeSentry
# in MULTILOAD()
ctc_init_patch_list['CTC_code_sentry_call'] = {}
ctc_init_patch_list['CTC_code_sentry_call']['start_offset'] = 0x00009618
ctc_init_patch_list['CTC_code_sentry_call']['change_from_jump']  = 'jal.initCodeSentry'
ctc_init_patch_list['CTC_code_sentry_call']['change_to_jump'] = 'jal.ctc_initCodeSentry'

# Redirect the call to startHceTaskMenuMultiItem2_FSM
# in getHceTaskMenuMultiItem2_FSM_valid
ctc_init_patch_list['CTC_fsm_get_valid_getHceTaskMenu'] = {}
ctc_init_patch_list['CTC_fsm_get_valid_getHceTaskMenu']['start_offset'] = 0x00111d96
ctc_init_patch_list['CTC_fsm_get_valid_getHceTaskMenu']['change_from_jump']  = 'j.fsm_get_valid'
ctc_init_patch_list['CTC_fsm_get_valid_getHceTaskMenu']['change_to_jump'] = 'j.ctc_fsm_get_valid_HceTaskMenu'

# Redirect the call to fsm_get_valid
# in startHceTaskMenuMultiItem2_FSM()
ctc_init_patch_list['CTC_fsm_get_valid_HceTaskMenu'] = {}
ctc_init_patch_list['CTC_fsm_get_valid_HceTaskMenu']['start_offset'] = 0x00111e0c
ctc_init_patch_list['CTC_fsm_get_valid_HceTaskMenu']['change_from_jump']  = 'jal.fsm_get_valid'
ctc_init_patch_list['CTC_fsm_get_valid_HceTaskMenu']['change_to_jump'] = 'jal.ctc_fsm_get_valid_HceTaskMenu'


# Redirect the call to fsm_spawn
# in startHceTaskMenuMultiItem2_FSM()
ctc_init_patch_list['CTC_fsm_spawn_HceTaskMenu'] = {}
ctc_init_patch_list['CTC_fsm_spawn_HceTaskMenu']['start_offset'] = 0x00111e40
ctc_init_patch_list['CTC_fsm_spawn_HceTaskMenu']['change_from_jump']  = 'jal.fsm_spawn'
ctc_init_patch_list['CTC_fsm_spawn_HceTaskMenu']['change_to_jump'] = 'jal.ctc_fsm_spawn_HceTaskMenu'

